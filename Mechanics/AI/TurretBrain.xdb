<?xml version="1.0" encoding="UTF-8" ?>
<gameMechanics.world.mob.behaviour.brain.MobBrainResource>
	<Header>
		<resourceId>164147200</resourceId>
	</Header>
	<root type="gameMechanics.world.behaviour.genericBrain.AIStatesGroupNode">
		<name>Root</name>
		<groupType>Static</groupType>

		<subnodes>
			<Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
				<name>IdleState</name>
				<state type="gameMechanics.world.mob.behaviour.components.states.AIStateIdle" />
				<optional>
					<Item>
						<to>AttackState</to>
						<pipe type="gameMechanics.world.mob.behaviour.components.pipes.AggroAppearedPipe" />
					</Item>
					<Item>
						<to>DeadState</to>
						<pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
							<impacts>
								<Item type="gameMechanics.elements.impacts.ImpactLand" />
								<Item type="gameMechanics.elements.impacts.ImpactsDeferred">
									<delay>10000</delay>
									<impacts>
										<Item type="gameMechanics.elements.impacts.PostponedImpacts">
											<impacts>
												<Item type="gameMechanics.elements.impacts.Disintegrate" />
											</impacts>
										</Item>
									</impacts>
								</Item>
							</impacts>
							<eventType>gameMechanics.elements.events.EventDeath</eventType>
							<isSubscriptional>false</isSubscriptional>
							<eventPredicate type="gameMechanics.world.mob.behaviour.components.predicates.PredicateFromSelf" />
						</pipe>
					</Item>
				</optional>
				<activeConvolutions>
					<Item type="gameMechanics.world.mob.behaviour.components.states.AggressiveConvolution" />
				</activeConvolutions>
			</Item>

			<Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
				<name>AttackState</name>
				<state type="gameMechanics.world.mob.behaviour.components.states.AIStateTurretAttack" />
				<optional>
					<Item>
						<to>IdleState</to>
						<pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
							<eventType>gameMechanics.world.mob.behaviour.aiMsgs.AggroDisappearedMsg</eventType>
						</pipe>
					</Item>
					<Item>
						<to>DeadState</to>
						<pipe type="gameMechanics.world.mob.behaviour.components.pipes.UniversalEventHandlerPipe">
							<impacts>
								<Item type="gameMechanics.elements.impacts.ImpactLand" />
								<Item type="gameMechanics.elements.impacts.ImpactsDeferred">
									<delay>10000</delay>
									<impacts>
										<Item type="gameMechanics.elements.impacts.PostponedImpacts">
											<impacts>
												<Item type="gameMechanics.elements.impacts.Disintegrate" />
											</impacts>
										</Item>
									</impacts>
								</Item>
							</impacts>
							<eventType>gameMechanics.elements.events.EventDeath</eventType>
							<isSubscriptional>false</isSubscriptional>
							<eventPredicate type="gameMechanics.world.mob.behaviour.components.predicates.PredicateFromSelf" />
						</pipe>
					</Item>
				</optional>
				<activeConvolutions>
					<Item type="gameMechanics.world.mob.behaviour.components.states.AggressiveConvolution" />
				</activeConvolutions>
			</Item>

			<Item type="gameMechanics.world.behaviour.genericBrain.AIStateNodeSingle">
				<name>DeadState</name>
				<state type="gameMechanics.world.mob.behaviour.components.states.AIStateIdle" />
			</Item>

		</subnodes>

		<initialState>IdleState</initialState>

		<reaction type="gameMechanics.world.mob.behaviour.brain.MobBrainReaction">
			<effects>
				<Item type="gameMechanics.elements.effects.Guard">
					<scanRadius>50</scanRadius>
					<noticeTarget>true</noticeTarget>
				</Item>
			</effects>
		</reaction>

	</root>
</gameMechanics.world.mob.behaviour.brain.MobBrainResource>
