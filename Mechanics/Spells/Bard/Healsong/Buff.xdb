<?xml version="1.0" encoding="UTF-8" ?>
<gameMechanics.constructor.schemes.buff.BuffResource>
	<Header>
		<resourceId>275910668</resourceId>
		<isPrototype>true</isPrototype>
	</Header>
	<image href="/Interface/Icons/Spells/Bard/Healsong.(UISingleTexture).xdb#xpointer(/UISingleTexture)" />
	<visScript href="/Spells/VisScripts/Bard/Healsong_Buff.(BuffVisScripts).xdb#xpointer(/BuffVisScripts)" />
	<needVisualize>false</needVisualize>
	<needVisualizeDuration>false</needVisualizeDuration>
	<nameTemplate href="Buff_Name.txt.template" />
	<descTemplate href="Buff_Desc.txt.template" />
	<effects>
		<Item type="gameMechanics.elements.effects.EffectIfOverTime">
			<impactsIf>
				<Item type="gameMechanics.elements.impacts.ImpactInstantiating">
					<impacts>
						<Item type="gameMechanics.elements.impacts.ImpactIfTarget">
							<predicates>
								<Item type="gameMechanics.constructor.basicElements.PredicateNot">
									<predicate type="gameMechanics.elements.predicates.PredicateHasBuffFromGroup">
										<groups>
											<Item href="/Mechanics/Spells/Groups/StopSing.xdb#xpointer(/gameMechanics.constructor.basicInterfaces.ActionGroup)" />
										</groups>
										<checkHelpful>true</checkHelpful>
										<checkHarmful>true</checkHarmful>
									</predicate>
								</Item>
							</predicates>
							<impactsIf>
								<Item type="gameMechanics.elements.impacts.ImpactCreaturesAround">
									<radius>20</radius>
									<affectGroup>Group</affectGroup>
									<affectHolder>true</affectHolder>
									<impacts>
										<Item type="gameMechanics.constructor.schemes.buff.BuffAttacher">
											<buff hrefvar="buff" />
											<allowOverrideCaster>false</allowOverrideCaster>
										</Item>
									</impacts>
									<filter type="gameMechanics.constructor.basicElements.FilterAnd">
										<filters>
											<Item type="gameMechanics.world.creature.AliveFilter">
												<alowImmortal>false</alowImmortal>
											</Item>
											<Item type="gameMechanics.constructor.basicElements.FilterPredicates">
												<predicates>
													<Item type="gameMechanics.constructor.basicElements.PredicateNot">
														<predicate type="gameMechanics.constructor.basicElements.PredicateOr">
															<predicates>
																<Item type="gameMechanics.elements.resources.ResourceBuff">
																	<buff href="Buff_02_01.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
																	<anyRank>true</anyRank>
																	<consumeStacks>0</consumeStacks>
																</Item>
																<Item type="gameMechanics.elements.resources.ResourceBuff">
																	<buff href="Buff_03_01.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
																	<anyRank>true</anyRank>
																	<consumeStacks>0</consumeStacks>
																</Item>
															</predicates>
														</predicate>
													</Item>
												</predicates>
											</Item>
										</filters>
									</filter>
									<targetsLimit>1</targetsLimit>
									<onBehalfOfHolder>true</onBehalfOfHolder>
								</Item>
								<Item type="gameMechanics.elements.impacts.ImpactCreaturesAround">
									<radius>20</radius>
									<affectGroup>Group</affectGroup>
									<affectHolder>true</affectHolder>
									<impacts>
										<Item type="gameMechanics.elements.impacts.ImpactResetBuffDuration">
											<buff hrefvar="buff02" />
										</Item>
										<Item type="gameMechanics.elements.impacts.ImpactsUnderEnvelope">
											<spell href="Spell01.xdb#xpointer(/gameMechanics.constructor.schemes.spell.casterSelf.SpellCasterSelf)" />
											<impacts>
												<Item type="gameMechanics.elements.impacts.ImpactHeal">
													<heal var="heal" />
													<scaler type="gameMechanics.constructor.basicElements.ScalerMultiple">
														<scalers>
															<Item type="gameMechanics.elements.scalers.PhysicalSpellPowerScaler" />
															<Item type="gameMechanics.elements.scalers.AbilityRankScaler">
																<ability href="/Mechanics/Spells/Bard/Abilities/ImpElegyHealsong/Ability01.xdb#xpointer(/gameMechanics.constructor.schemes.ability.AbilityResource)" />
																<mul>0.06</mul>
															</Item>
														</scalers>
													</scaler>
													<statsConvertor>
														<intuition type="gameMechanics.elements.calcers.InnateStatCalcer">
															<stat>IS_Dexterity</stat>
														</intuition>
														<spirit type="gameMechanics.elements.calcers.InnateStatCalcer">
															<stat>IS_Might</stat>
														</spirit>
													</statsConvertor>
												</Item>
											</impacts>
										</Item>
									</impacts>
									<filter type="gameMechanics.world.creature.AliveFilter">
										<alowImmortal>false</alowImmortal>
									</filter>
									<targetsLimit>0</targetsLimit>
									<onBehalfOfHolder>true</onBehalfOfHolder>
								</Item>
							</impactsIf>
						</Item>
					</impacts>
				</Item>
			</impactsIf>
			<runImpactsOnEachTick>true</runImpactsOnEachTick>
			<affectOnStartTick>false</affectOnStartTick>
			<tick type="gameMechanics.elements.calcers.CalcerMul">
				<calcers>
					<Item type="gameMechanics.elements.calcers.AbilityRankCalcer">
						<ability href="/Mechanics/Spells/Bard/Abilities/StrongHealsong/Ability01.xdb#xpointer(/gameMechanics.constructor.schemes.ability.AbilityResource)" />
						<mul>-400</mul>
						<sum>4000</sum>
					</Item>
					<Item type="gameMechanics.elements.calcers.CalcerIf">
						<predicate type="gameMechanics.elements.resources.ResourceBuff">
							<buff href="/Mechanics/Spells/Bard/QuickSong/Buff01.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
						</predicate>
						<calcerIf type="gameMechanics.elements.calcers.LinearCalcer">
							<mul>-1</mul>
							<mulCalcer type="gameMechanics.constructor.basicElements.ScalerCalcer">
								<scaler type="gameMechanics.elements.scalers.BuffRankScaler">
									<buff href="/Mechanics/Spells/Bard/QuickSong/Buff01.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
									<mul>1</mul>
								</scaler>
								<value>1</value>
							</mulCalcer>
							<sum>5</sum>
						</calcerIf>
						<calcerElse type="gameMechanics.elements.calcers.FloatData">
							<value>1</value>
						</calcerElse>
					</Item>
				</calcers>
			</tick>
		</Item>
	</effects>
	<duration>0</duration>
	<isStackable>false</isStackable>
	<stackLimit>1</stackLimit>
	<isGradual>false</isGradual>
	<isHelpful>true</isHelpful>
	<isDetachableOnWill>false</isDetachableOnWill>
	<isMultiple>false</isMultiple>
	<ranks>
		<Item href="Buff01.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
		<Item href="Buff02.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
		<Item href="Buff03.xdb#xpointer(/gameMechanics.constructor.schemes.buff.BuffResource)" />
	</ranks>
	<canBeSaved>false</canBeSaved>
	<isClientReplicated>true</isClientReplicated>
	<resistType>SRT_BuffDebuff</resistType>
</gameMechanics.constructor.schemes.buff.BuffResource>
